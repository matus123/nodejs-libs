image: docker:19.03.5

services:
  - docker:19.03.5-dind

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  # DOCKER_TLS_CERTDIR: "/certs"
  # DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:
  # - install
  # - static
  - build
  # - test
  # - docker

Build app:
  stage: build
  script:
    - docker pull $CI_REGISTRY_IMAGE/app:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE/app:latest --target packages --force-rm --tag $CI_REGISTRY_IMAGE/app:packages .
    - docker build --cache-from $CI_REGISTRY_IMAGE/app:latest --target release --force-rm --tag $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/app:latest .
    - docker push $CI_REGISTRY_IMAGE/app:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/app:latest

Build migrations:
  stage: build
  script:
    - docker build --target release --force-rm --tag $CI_REGISTRY_IMAGE/db:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/db:latest ./db
    - docker push $CI_REGISTRY_IMAGE/db:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/db:latest

# Install dependencies:
#   stage: install
#   cache:
#     key: "node-modules-cache-$CI_COMMIT_REF_NAME"
#     paths:
#       - cache/

#   script:
#     - node --version && yarn --version

#     - export PACKAGES_CHECKSUM=$(md5sum .gitlab-ci.yml | awk '{print $1}')-$(md5sum package.json | awk '{print $1}')-$(md5sum yarn.lock | awk '{print $1}')

#     # Restore node_modules cache
#     - (ls cache/node-modules-${PACKAGES_CHECKSUM}.tgz && tar -xf cache/node-modules-${PACKAGES_CHECKSUM}.tgz) || true

#     # Install node packages
#     - yarn install --pure-lockfile

#     # Save node_modules cache
#     - rm -r cache || true
#     - mkdir -p cache
#     - tar -zcf cache/node-modules-${PACKAGES_CHECKSUM}.tgz node_modules

#   artifacts:
#     paths:
#       - node_modules/
#     expire_in: 1 hour

# Build:
#   stage: build
#   script:
#     - yarn build:client
#     - yarn build:server

# Static Analysis:
#   stage: static
#   script:
#     # Run linter
#     - yarn run test:lint

# Check GraphQL code generation:
#   stage: static

#   script:
#     - .dev/scripts/generate_graphql_schema.sh

#     # Graphql schema file should not change
#     # No files should change after codegen
#     - test "$(git diff --name-only HEAD | wc -l | xargs)" == 0

# Unit tests:
#   stage: test
#   script:
#     - yarn test:unit:backend || true
#     - yarn test:unit:frontend || true

# Integration tests:
#   stage: test
#   services:
#     - name: postgres:11.1-alpine
#       alias: postgres
#     - name: redis:5.0.3-alpine
#       alias: redis
#     - name: minio/minio:RELEASE.2019-08-21T19-40-07Z
#       alias: minio
#       command: ["server", "/data"]
#   variables:
#     POSTGRES_USER: realty
#     AWS_ACCESS_KEY_ID: 29ZOZUJBI4IFR2MNYAKGC2KE5EIXI2F2G
#     AWS_SECRET_KEY: 0q+NsAKGC2Ke5EIxi2F2Ght9V/SLyJnSAz5R2oNELjJ
#     AWS_S3_ENDPOINT: http://minio:9000
#     POSTGRES_URL: postgres://realty@postgres/realty

#   script:
#     - yarn db:migrate:run
#     - yarn test:unit:integration || true

# Build Docker image:
#   stage: docker
#   image: docker:git
#   services:
#     - docker:dind
#   script:
#     - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
#     - docker build -t $CI_REGISTRY_IMAGE:latest .
#     - docker images
#     - docker push $CI_REGISTRY_IMAGE:latest
#   only:
#     - master
